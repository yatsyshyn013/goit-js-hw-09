{"mappings":"iiBAAA,IAAAA,EAAAC,EAAA,SAEMC,EAAO,CACXC,OAAQC,SAASC,cAAc,SAC/BC,QAASF,SAASC,cAAc,mBAChCE,OAAQH,SAASC,cAAc,kBAC/BG,SAAUJ,SAASC,cAAc,oBACjCI,UAAWL,SAASC,cAAc,WAkCpC,SAASK,EAAcC,EAAUC,GAC/B,IAAMC,EAAgBC,KAAKC,SAAW,GACtC,OAAO,IAAIC,SAAQ,SAACC,EAASC,GAC3BC,YAAW,WACLN,EACFI,EAAQ,CAAEN,WAAUC,UAEpBM,EAAO,CAAEP,WAAUC,S,GAEpBA,E,IAtCPV,EAAKC,OAAOiB,iBAAiB,UAG7B,SAAwBC,GACtBA,EAAIC,iBAEJ,IAAIC,EAAQC,OAAOtB,EAAKI,QAAQmB,OAC5BC,EAAOF,OAAOtB,EAAKK,OAAOkB,OAC1BE,EAASH,OAAOtB,EAAKM,SAASiB,OAElC,GAAIF,EAAQ,GAAKG,EAAO,GAAKC,GAAU,EAErC,YADAC,EAAA5B,GAAS6B,OAAOC,QAAQ,yBAI1B,IAAK,IAAIC,EAAI,EAAGA,GAAKJ,EAAQI,IAC3BrB,EAAcqB,EAAGR,GACfS,MAAK,SAAAC,G,IAAGtB,EAAQsB,EAARtB,SAAUC,EAAKqB,EAALrB,MACpBgB,EAAA5B,GAAS6B,OAAOK,QAAQ,uBAAwCC,OAAfxB,EAAS,QAAYwB,OAANvB,EAAM,M,IAErEwB,OAAM,SAAAH,G,IAAGtB,EAAQsB,EAARtB,SAAUC,EAAKqB,EAALrB,MACpBgB,EAAA5B,GAAS6B,OAAOC,QAAQ,sBAAuCK,OAAfxB,EAAS,QAAYwB,OAANvB,EAAM,M,IAErEW,GAASG,EAGXxB,EAAKC,OAAOkC,O","sources":["src/js/03-promises.js"],"sourcesContent":["import Notiflix from 'notiflix';\n\nconst refs = {\n  formEl: document.querySelector('.form'),\n  delayEL: document.querySelector('[ name=\"delay\"]'),\n  stepEL: document.querySelector('[ name=\"step\"]'),\n  amountEL: document.querySelector('[ name=\"amount\"]'),\n  submitBtn: document.querySelector('button')\n};\n\n\n\nrefs.formEl.addEventListener('submit', onFormElSubmit);\n\n\nfunction onFormElSubmit(evt) {\n  evt.preventDefault();\n\n  let delay = Number(refs.delayEL.value);\n  let step = Number(refs.stepEL.value);\n  let amount = Number(refs.amountEL.value);\n\n  if (delay < 0 || step < 0 || amount <= 0) {\n    Notiflix.Notify.failure('Date must be positive');\n    return;\n  }\n\n  for (let i = 1; i <= amount; i++) {\n    createPromise(i, delay)\n     .then(({ position, delay }) => {\n    Notiflix.Notify.success(`✅ Fulfilled promise ${position} in ${delay}ms`);\n      })\n    .catch(({ position, delay }) => {\n    Notiflix.Notify.failure(`❌ Rejected promise ${position} in ${delay}ms`);\n    });\n    delay += step;\n    \n  }\n  refs.formEl.reset();\n}\n\nfunction createPromise(position, delay) {\n  const shouldResolve = Math.random() > 0.3;\n  return new Promise((resolve, reject) => {\n    setTimeout(() => {\n      if (shouldResolve) {\n        resolve({ position, delay });\n      } else {\n        reject({ position, delay });\n      }\n    }, delay);\n  \n  });\n  \n}\n\n\n// createPromise(2, 1500)\n//   .then(({ position, delay }) => {\n//     console.log(`✅ Fulfilled promise ${position} in ${delay}ms`);\n//   })\n//   .catch(({ position, delay }) => {\n//     console.log(`❌ Rejected promise ${position} in ${delay}ms`);\n//   });"],"names":["$6JpON","parcelRequire","$ce04d3a99e08e73b$var$refs","formEl","document","querySelector","delayEL","stepEL","amountEL","submitBtn","$ce04d3a99e08e73b$var$createPromise","position","delay","shouldResolve","Math","random","Promise","resolve","reject","setTimeout","addEventListener","evt","preventDefault","delay1","Number","value","step","amount","$parcel$interopDefault","Notify","failure","i","then","param","success","concat","catch","reset"],"version":3,"file":"03-promises.96e4cc58.js.map"}